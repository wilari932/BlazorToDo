@page "/ShowList/{listId}"; 
@using Services;
@using Data;
@inject ListHandler listHandler;
@inject NavigationManager manager;
@inject TaskHandler taskHandler;


<h1>@theList.ListTitle</h1>

<div class="flex flex-row">
    @foreach (var task in theList.Task)
    {
        <p class="taskTitle">@task.TaskTitle</p>
        <button @onclick="@(async () => await DeleteTask(task))" class="btn-small">Ta bort</button>
        <button @onclick="@(async () => await CompletedTask(task))" class="btn-small">Klar</button><br /><br />
    }

</div>

<div class="pt-5">
<EditForm Model="@tasks" OnSubmit="@AddTask">
    <InputText id="name"  @bind-Value="task.TaskTitle" /> <br /> 
    <button type="submit" class="btn-small">Lägg till</button>
</EditForm>
</div>





@code {

    public CreateToDoList theList = new ();
    public List<Data.Task> tasks = new();
    public Data.Task task= new();


    [Parameter]
    public string listId { get; set; }


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        Guid listID = Guid.Parse(listId);
        theList = await listHandler.ShowList(listID);
    }


    public async void AddTask()
    {
        Guid listID = Guid.Parse(listId);
        task.CreateToDoListId = listID;
        task.Id = Guid.NewGuid();  //När jag la till id här på tasken så kan jag skriva in en ny o radera den direkt o den visar id
        theList.Task.Add(task);
        await taskHandler.AddTask(task); 

    }


    public async System.Threading.Tasks.Task DeleteTask(Data.Task task)
    {
        theList.Task.Remove(task); 
        await taskHandler.DeleteTask(task);

    }

    public async System.Threading.Tasks.Task CompletedTask(Data.Task task)
    {
        Guid listID = Guid.Parse(listId);
        Guid taskID = task.Id;
        theList.Task.Remove(task);
        theList = await listHandler.ShowList(listID);
        await taskHandler.DeleteTask(task);
    }

}